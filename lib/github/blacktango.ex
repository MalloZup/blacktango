defmodule Github do
  require Neuron


  def comment_prs_and_issues do
    gitHub_url = "https://api.github.com/graphql"
    [:ok, token] = Configuration.Yaml.credentials()
    headers = ["Authorization": "Bearer #{token}", "Accept": "Application/json; Charset=utf-8"] 
    Neuron.Config.set(headers: headers)
    Neuron.Config.set(url: gitHub_url)
    repos = Configuration.Yaml.github_repos()
    # todo: add parallelism for this
    IO.puts("checking Issues")
    set_comment_to_old_issues(repos)
    IO.puts("checking Pull-Requests")
    set_comment_to_old_prs(repos)
  end

  defp set_comment_to_old_issues(repos) do
    Enum.map(repos, fn(repo)->
      [owner, repo] = String.split("#{repo}", "/")
      # read all open issue from user repo
      {:ok, response } =   Github.Graphql.get_repo_issues(owner, repo) 
      response.body["data"]["repository"]["issues"]["edges"] |>
      Enum.map(fn(issue)->
        {:ok, issue_update_at, _} = DateTime.from_iso8601(issue["node"]["updatedAt"])
        [:ok, days] = Configuration.Yaml.tolleration_days()
        if issue_older_then_day(issue_update_at, days) do
         IO.puts("adding comment to GitHub Issue #{issue["node"]["url"]}")
         days_string = Integer.to_string(days, 10) # decimal base
         comment = "This GitHub Issue is unactive since more then #{days_string} days. Is this GitHub Issue still needed? Please close or update it accordingly.
         This reminder is autogenerated by https://github.com/MalloZup/blacktango"
         add_comment(comment, issue["node"]["id"])
        end 
      end)
    end)
  end

  defp set_comment_to_old_prs(repos) do
    Enum.map(repos, fn(repo)->
      [owner, repo] = String.split("#{repo}", "/")
      # read all open issue from user repo
      {:ok, response } =   Github.Graphql.get_repo_prs(owner, repo) 
      response.body["data"]["repository"]["pullRequests"]["edges"] |>
      Enum.map(fn(issue)->
        {:ok, pr_update_at, _} = DateTime.from_iso8601(issue["node"]["updatedAt"]) 
        [:ok, days] = Configuration.Yaml.tolleration_days()
        if issue_older_then_day(pr_update_at, days) do
         IO.puts("adding comment to GitHub PR #{issue["node"]["url"]}")
         days_string = Integer.to_string(days, 10)
         comment = "This GitHub PR is unactive since more then #{days_string} days. Is this GitHub PR still needed? Please close or update it accordingly.
         This reminder is autogenerated by https://github.com/MalloZup/blacktango" 
         add_comment(comment, issue["node"]["id"])
        end 
      end)
    end)
  end

# check if GitHub issue/pr is older then a fixed date, so we can trigger a comment if it is older.
defp issue_older_then_day(issue_update_data, day_max_tollerated) do
  diff_second = DateTime.diff(DateTime.utc_now(), issue_update_data)
  # input: the update_at, compare it with actual time of the machine executing code.
  # calculate number of day passed,  then compare it the tolleration_day.yaml
  diff_day = diff_second / 86400 |>  trunc
  diff_day > day_max_tollerated
end

### given a GitHub issue ID, add a comment to that issue
 defp add_comment(comment, issue_id) do 
   {:ok, _} =   Github.Graphql.add_comment(comment, issue_id) 
 end

end